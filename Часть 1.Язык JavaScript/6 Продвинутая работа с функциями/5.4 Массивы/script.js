// ? Задача 1.Скопирован ли массив?
// Что выведет следующий код?
// let fruits = ["Яблоки", "Груша", "Апельсин"];
// добавляем новое значение в "копию"
// let shoppingCart = fruits;
// shoppingCart.push("Банан");

// что в fruits?
// alert( fruits.length ); // ?

// ! Ответ: 4, т.к. массивы ведут себя так же как и объекты.

// ? Задача 2.Операции с массивами
// Давайте произведём 5 операций с массивом.

// Создайте массив styles с элементами «Джаз» и «Блюз».
// Добавьте «Рок-н-ролл» в конец.
// Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
// Удалите первый элемент массива и покажите его.
// Вставьте Рэп и Регги в начало массива.
// Массив по ходу выполнения операций:

// Джаз, Блюз
// Джаз, Блюз, Рок-н-ролл
// Джаз, Классика, Рок-н-ролл
// Классика, Рок-н-ролл
// Рэп, Регги, Классика, Рок-н-ролл

let styles = ['Джас', 'Блюз',];
// console.log(styles);
styles.push('Рок-н-ролл');
// console.log(styles);
styles[Math.floor((styles.length - 1) / 2)] = "Классика";
// console.log(styles);
console.log(( styles.shift() ));
// console.log(styles);
styles.unshift("Рэп", "Регги");
// console.log(styles);

// ? Задача 3.Вызов в контексте массива
// Каков результат? Почему?

// let arr = ["a", "b"];

// arr.push(function() {
//   alert( this );
// });

// arr[2](); // ?

// ! Ответ: метод push - добовляет элемент в конец массива.
// ! htis - обращается к родителю (массиву).
// ! Получается что сдесь выводиться содержимое массива + сама функция. a,b,function(){...}

// ? Задача 4.Сумма введённых чисел
// Напишите функцию sumInput(), которая:

// Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
// Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
// Подсчитывает и возвращает сумму элементов массива.
// P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».

function sumInput() {

	let arr = [];
 
	while (true) {
 
	  let value = prompt("Введите число.", 0);

	  if (value === "" || value === null || !isFinite(value)) break;
 
	  arr.push(+value);
	}
 
	let sum = 0;
	for (let number of arr) {
	  sum += number;
	}
	return sum;
 }
 
 alert( sumInput() );

//  ? Задача 5.Подмассив наибольшей суммы
// На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].
// Задача: найти непрерывный подмассив в arr, сумма элементов в котором максимальна.
// Функция getMaxSubSum(arr) должна возвращать эту сумму.
// Например:

// getMaxSubSum([-1, 2, 3, -9]) == 5 (сумма выделенных элементов)
// getMaxSubSum([2, -1, 2, 3, -9]) == 6
// getMaxSubSum([-1, 2, 3, -9, 11]) == 11
// getMaxSubSum([-2, -1, 1, 2]) == 3
// getMaxSubSum([100, -9, 2, -3, 5]) == 100
// getMaxSubSum([1, 2, 3]) == 6 (берём все)
// Если все элементы отрицательные – ничего не берём(подмассив пустой) и сумма равна «0»:

// getMaxSubSum([-1, -2, -3]) = 0
// Попробуйте придумать быстрое решение: O(n2), а лучше за О(n) операций.


function getMaxSubSum(arr) {
	let maxSum = 0;
	let partialSum = 0;
 
	for (let item of arr) { 
	  partialSum += item; 
	  maxSum = Math.max(maxSum, partialSum); 
	  if (partialSum < 0) partialSum = 0; 
	}
 
	return maxSum;
 }