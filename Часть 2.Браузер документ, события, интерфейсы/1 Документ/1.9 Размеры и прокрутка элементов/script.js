// ? Задача 1.Найти размер прокрутки снизу
// Свойство elem.scrollTop содержит размер прокрученной области при отсчёте сверху. А как подсчитать размер прокрутки снизу (назовём его scrollBottom)?
// Напишите соответствующее выражение для произвольного элемента elem.

let scrollBottom = elem.scrollHeight - elem.scrollTop - elem.clientHeight;

// ? Задача 2.Узнать ширину полосы прокрутки
// Напишите код, который возвращает ширину стандартной полосы прокрутки.
// Для Windows она обычно колеблется от 12px до 20px. Если браузер не выделяет место под полосу прокрутки (так тоже бывает, она может быть прозрачной над текстом), тогда значение может быть 0px.
// P.S. Ваш код должен работать в любом HTML-документе, независимо от его содержимого.

let poplosaScrolling = elem.offsetWidth - elem.clientWidth - elem.	clientLeft*2

// ? Зададача 3.Поместите мяч в центр поля
// важность: 5
// Исходный документ выглядит так:
// Каковы координаты центра поля?
// Вычислите их и используйте, чтобы поместить мяч в центр поля:
// Элемент должен позиционироваться за счёт JavaScript, а не CSS.
// Код должен работать с любым размером мяча (10, 20, 30 пикселей) и любым размером поля без привязки к исходным значениям.
// P.S. Да, центрирование можно сделать при помощи чистого CSS, но задача именно на JavaScript. Далее будут другие темы и более сложные ситуации, когда JavaScript будет уже точно необходим, это – своего рода «разминка».

// ! Что бы разместить лто по ценнтру нам надо шири и высоту внутреннего поля пожелить паполам и отнять половину элемента.

ball.style.left = Math.round(field.clientWidth / 2 - ball.offsetWidth / 2) + 'px';
ball.style.top = Math.round(field.clientHeight / 2 - ball.offsetHeight / 2) + 'px';
// ? Задача 4.В чём отличие CSS-свойств width и clientWidth
// В чём отличие между getComputedStyle(elem).width и elem.?
// Укажите хотя бы 3 отличия, лучше – больше.

// ! clientWidth не учитывает полоса прокрутки;
// ! clientWidth возвращает число, а getComputedStyle(elem).width – строку с px на конце;
// ! clientWidth соответствует внутренней области элемента, включая внутренние отступы padding, а CSS-ширина (при стандартном значении box-sizing) соответствует внутренней области без внутренних отступов padding.